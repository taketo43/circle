githubについてまとめました。

#clone
リモートリポジトリをコピーしてローカル（自分のマシン）上に同一のリポジトリを作成する。
$ git clone git@github.com:<自分のアカウント名>/<リポジトリ名>

#fork
他人のリポジトリ上のファイルやディレクトリを自分のところに引っ張ってくる。
ネット上でやることが多いのかも？

#pull
リモートリポジトリの内容（ブランチ）を自分のリポジトリのブランチに反映する。その際マージが起こるので注意
リモート上のマスターブランチを自分のリポジトリのAブランチに引っ張ってきたいときは以下の通り
$ cd <自分のリポジトリ>
$ git branch A
$ git pull origin master

#fetch
リモートリポジトリの内容を自分のリポジトリに反映する。マージはおこらない。
ブランチを切って引っ張ってくるのが良いのかも？

#commit
リポジトリの任意で選択したファイルやディレクトリの状態をセーブする。
セーブすることで失敗した時にその状態に戻ってこれる。
セーブしたもの（保存したもの）の状態を持ってこれる的な
例 : commitの順番が以下の通り
状態1(a1,b1,c1) → 状態2(a2,b2) → 状態3(a3,b3,c3)
の順番でcommitした時に状態2に戻ると[a2,b2]がその時の状態でリポジトリ内に復活する。
cは保存に入ってないため、状態2に戻っても今の編集段階のままである。

また、commitする際は、どのような変更をしたかを示す必要がある。（周りに知らせてコミュニケーション）
この観点から、以下のようにコマンドを打つことが望ましい
$ git commit -m "○○を変更したよ！！！"

#add
リポジトリ内の何（ファイルやディレクトリ）をセーブするかを選択する。
add → commit
例 : Aをaddしたいとき
$ git add A
例 : リポジトリ内の全てをaddしたいとき
$ git add .

#push
commitしているもので一番最新のものをリモートリポジトリ上に反映する
例 : commitの順番が以下の通り
状態1(a1,c1) → 状態2(a2,b1,c2) → 状態3(a3)
この場合リモートリポジトリに反映されるのは、(a3,b1,c2)となる。
ちなみにリモートリポジトリのmasterブランチに反映されるため以下のコマンドを打つ
$ git push origin master
ここでは、origin が「リモートリポジトリ」を示している。

#branch
現在のリポジトリの状態を完全に複製する（影分身的な）。この後にmarge等を行うことで元に戻す。（影分身解除的な）
例 : Aというブランチを作りたいとき
$ git branch A
例 : masterブランチに切り替えたい時
$ git checkout master
ちなみにローカルブランチを削除したいときは
$ git branch -D <ブランチ名>　これはどんなブランチでも削除できる

#checkout
新たなブランチを作ってそのブランチに切り替える。以下のようにコマンドを打てば良い
$ git checkout -b <作りたいブランチの名前>

#marge
branchで進めた作業を一つに集約する。ただし、masterから（master状態[a,b,c]）A,Bという二つのブランチを作り、
状態[a,b,c]のうちA,Bの両方で[a]を編集する→marge というようなことをするとエラーが起こる。
ブランチを切った後に同一ファイルの編集をしてはいけないので気を付ける。

#diff
変更前と変更後の差を見ることができる。
$ git diff

#Pull Request
margeしても良いかを偉い人に聞く。margeした時にmasterの大元が変更した時に大損害を及ぼす可能性があるから。
masterに少しずつ葉を着けて少しずつ機能をupしていく必要がある。

#status
直前のコミットからの変更点を見ることができる。
$ git status

#commitツリー表示
$ git log --gragh --all --format="%x09%an%x09%h %d $s"